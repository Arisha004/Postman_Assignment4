{
	"info": {
		"_postman_id": "f7af3a85-96ed-4df7-ae4f-bd6a6ca44c5e",
		"name": "Bookstore_Assignment4_Arisha_Mumtaz",
		"description": "Assignment 4 – API Testing with Postman. Covers GET, POST, PUT, PATCH, DELETE, with variable handling, random data, chaining, assertions, and dynamic testing.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47469268",
		"_collection_link": "https://arishamumtaz340-4213200.postman.co/workspace/Assignment4_API_Testing~d5bfa578-ff9b-4102-97fb-621beafebbbc/collection/47469268-f7af3a85-96ed-4df7-ae4f-bd6a6ca44c5e?action=share&source=collection_link&creator=47469268"
	},
	"item": [
		{
			"name": "All Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"console.log('First Post:', jsonData[0]);",
							"pm.environment.set('postId', jsonData[0].id);",
							"pm.test(\"Content-Type is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random title and body",
							"let randomTitle = \"Title_\" + Math.floor(Math.random() * 1000);",
							"let randomBody = \"Body_\" + Math.floor(Math.random() * 1000);",
							"",
							"// Set as environment variables",
							"pm.environment.set(\"randomTitle\", randomTitle);",
							"pm.environment.set(\"randomBody\", randomBody);",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"console.log(\"Created Post:\", jsonData);",
							"",
							"// Save postId if available",
							"if (jsonData.id) {",
							"  pm.environment.set(\"postId\", jsonData.id);",
							"  console.log(\"postId saved:\", jsonData.id);",
							"} else {",
							"  console.warn(\"No id returned in response. POST may have failed.\");",
							"}",
							"",
							"pm.test(\"Response has id and title\", function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('title');",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get('randomTitle'));",
							"});",
							"",
							"pm.test(\"Response body matches sent data\", function () {",
							"    pm.expect(jsonData.body).to.eql(pm.environment.get('randomBody'));",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"{{randomTitle}}\",\n  \"body\": \"{{randomBody}}\",\n  \"userId\": 1\n}\n"
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('PATCH status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"console.log('PATCH Response:', pm.response.json());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Title by PATCH\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace Post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Force use of an existing ID (1–100)\r",
							"pm.environment.set(\"postId\", 1);\r",
							"\r",
							"// Generate new random data for update\r",
							"let updatedTitle = \"Updated_Title_\" + Math.floor(Math.random() * 1000);\r",
							"let updatedBody = \"Updated_Body_\" + Math.floor(Math.random() * 1000);\r",
							"\r",
							"pm.environment.set(\"randomTitle\", updatedTitle);\r",
							"pm.environment.set(\"randomBody\", updatedBody);\r",
							"\r",
							"console.log(\"Replacing post with:\", {\r",
							"  id: pm.environment.get(\"postId\"),\r",
							"  title: updatedTitle,\r",
							"  body: updatedBody\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () { ",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"console.log(\"PUT Response JSON:\", jsonData);",
							"",
							"pm.test(\"Response has same id\", function () {",
							"  pm.expect(jsonData.id).to.eql(Number(pm.environment.get(\"postId\")));",
							"});",
							"",
							"pm.test(\"Response has updated title and body\", function () {",
							"  pm.expect(jsonData.title).to.eql(pm.environment.get(\"randomTitle\"));",
							"  pm.expect(jsonData.body).to.eql(pm.environment.get(\"randomBody\"));",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function () {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{postId}},\n  \"title\": \"{{randomTitle}}\",\n  \"body\": \"{{randomBody}}\",\n  \"userId\": 1\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Response body is empty object\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.eql({});",
							"    console.log(\"DELETE Response:\", jsonData);",
							"});",
							"// Clean up environment variable after deletion",
							"pm.environment.unset(\"postId\");",
							"console.log(\"postId cleared after DELETE\");",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Make sure postId exists before deleting\r",
							"if (!pm.environment.get(\"postId\")) {\r",
							"    pm.environment.set(\"postId\", 1); // default to post 1 if missing\r",
							"}\r",
							"console.log(\"Deleting post with ID:\", pm.environment.get(\"postId\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NEGATIVE TEST - Failing Assertion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// NEGATIVE TEST CASE - Intentional Failure",
							"// This test checks how the API responds to an invalid endpoint.",
							"// Expected: 404 Not Found",
							"",
							"pm.test(\"Status code is 404 (Intentional Negative Test)\", function () {",
							"    pm.expect(pm.response.code).to.eql(404);",
							"});",
							"",
							"pm.test(\"Response message or error text should exist\", function () {",
							"    pm.expect(pm.response.text()).to.not.be.empty;",
							"});",
							"",
							"console.log(\"Negative test executed: verified 404 on invalid endpoint\");",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/invalidEndpoint",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"invalidEndpoint"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com"
		}
	]
}